steps:
- id: 'tf init'
  name: 'hashicorp/terraform:1.0.0'
  entrypoint: 'sh'
  args: 
  - '-c'
  - |
      if [ -d "environments/$BRANCH_NAME/" ]; then
        cd environments/$BRANCH_NAME
        terraform init
      else
        for dir in environments/*/
        do 
          cd ${dir}   
          env=${dir%*/}
          env=${env#*/}
          echo ""
          echo "*************** TERRAFORM INIT ******************"
          echo "******* At environment: ${env} ********"
          echo "*************************************************"
          terraform init || exit 1
          cd ../../
        done
      fi 

# [START tf-plan]
- id: 'tf plan'
  name: 'hashicorp/terraform:1.0.0'
  entrypoint: 'sh'
  args: 
  - '-c'
  - | 
      if [ -d "environments/$BRANCH_NAME/" ]; then
        cd environments/$BRANCH_NAME
        terraform plan
      else
        for dir in environments/*/
        do 
          cd ${dir}   
          env=${dir%*/}
          env=${env#*/}  
          echo ""
          echo "*************** TERRAFOM PLAN ******************"
          echo "******* At environment: ${env} ********"
          echo "*************************************************"
          terraform plan || exit 1
          cd ../../
        done
      fi 
# [END tf-plan]

# [START tf-apply]
- id: 'tf apply'
  name: 'hashicorp/terraform:1.0.0'
  entrypoint: 'sh'
  args: 
  - '-c'
  - | 
      if [ -d "environments/$BRANCH_NAME/" ]; then
        cd environments/$BRANCH_NAME      
        terraform apply -auto-approve
      else
        echo "***************************** SKIPPING APPLYING *******************************"
        echo "Branch '$BRANCH_NAME' does not represent an official environment."
        echo "*******************************************************************************"
      fi
- id: Build
  name: gcr.io/cloud-builders/docker
  entrypoint: bash
  args: 
      - -c
      - |
          docker build --build-arg REDIS_URL=$$REDIS_URL --build-arg NEXT_PUBLIC_AUTH0_CLIENT_ID=$$NEXT_PUBLIC_AUTH0_CLIENT_ID --build-arg NEXT_PUBLIC_AUTH0_DOMAIN=$$NEXT_PUBLIC_AUTH0_DOMAIN --build-arg NEXT_PUBLIC_AUTH0_ADMIN_EMAIL=$$NEXT_PUBLIC_AUTH0_ADMIN_EMAIL -t us.gcr.io/$PROJECT_ID/$REPO_NAME/the-new-world:$SHORT_SHA ui
  secretEnv: ['REDIS_URL', 'NEXT_PUBLIC_AUTH0_CLIENT_ID','NEXT_PUBLIC_AUTH0_DOMAIN','NEXT_PUBLIC_AUTH0_ADMIN_EMAIL']
- id: Push
  name: gcr.io/cloud-builders/docker
  args: [ 'push', 'us.gcr.io/$PROJECT_ID/$REPO_NAME/the-new-world:$SHORT_SHA' ]
- id: Deploy
  name: gcr.io/google.com/cloudsdktool/cloud-sdk
  entrypoint: gcloud
  args: [ 'run', 'services', 'update', 'the-new-world', '--image=us.gcr.io/the-new-world-376918/the-new-world/the-new-world:$SHORT_SHA', '--region=us-central1']

availableSecrets:
  secretManager:
  - versionName: projects/$PROJECT_ID/secrets/the-new-world-REDIS_URL/versions/1
    env: 'REDIS_URL'
  - versionName: projects/$PROJECT_ID/secrets/the-new-world-NEXT_PUBLIC_AUTH0_CLIENT_ID/versions/1
    env: 'NEXT_PUBLIC_AUTH0_CLIENT_ID'
  - versionName: projects/$PROJECT_ID/secrets/the-new-world-NEXT_PUBLIC_AUTH0_DOMAIN/versions/1
    env: 'NEXT_PUBLIC_AUTH0_DOMAIN'
  - versionName: projects/$PROJECT_ID/secrets/the-new-world-NEXT_PUBLIC_AUTH0_ADMIN_EMAIL/versions/1
    env: 'NEXT_PUBLIC_AUTH0_ADMIN_EMAIL'
# [END tf-apply]      
